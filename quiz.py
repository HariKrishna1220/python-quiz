{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd742e35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the Advanced Python Quiz!\n",
      "Do you want to play? (yes/no) 3\n",
      "Okay, let's play!\n"
     ]
    }
   ],
   "source": [
    "def explain(arr):\n",
    "    for i in range(arr):\n",
    "        if arr[i]==1:\n",
    "            print(\"\"\" Correct Answer: 3\n",
    "            Explanation: A deep copy creates a new object and recursively copies all objects within,\n",
    "            whereas a shallow copy creates a new object but references the same objects within.\"\"\")\n",
    "        elif arr[i]==2:\n",
    "            print(\"\"\" Correct Answer: 2\n",
    "            Explanation: The default mutable argument (list b) retains its state between function calls, \n",
    "            so the list accumulates values.\"\"\")\n",
    "        elif arr[i]==3:\n",
    "            print(\"\"\" Correct Answer: 3\n",
    "            Explanation: Binary search divides the list in half each time,\n",
    "            resulting in a time complexity of O(log n).\"\"\")\n",
    "        elif arr[i]==4:\n",
    "            print(\"\"\" Correct Answer: 2\n",
    "            Explanation: Generators create iterators in a memory-efficient \n",
    "            way by yielding items one by one.\"\"\")\n",
    "        elif arr[i]==5:\n",
    "            print(\"\"\" Correct Answer: 2\n",
    "           Explanation: y and x refer to the same list object, so a change in y affects x as well.\"\"\")\n",
    "        elif arr[i]==6:\n",
    "            print(\"\"\" Correct Answer: 2\n",
    "            Explanation: inspect.isgeneratorfunction() checks if a function is a generator function.\"\"\")\n",
    "        elif arr[i]==7:\n",
    "            print(\"\"\" Correct Answer: 2\n",
    "            Explanation: The finally block executes after the try, overriding its return value,\n",
    "            so B is returned.\"\"\")\n",
    "        elif arr[i]==8:\n",
    "            print(\"\"\" Correct Answer: 2\n",
    "            Explanation: @staticmethod defines a static method that \n",
    "            does not receive an implicit first argument (like self).\"\"\")\n",
    "        elif arr[i]==9:\n",
    "            print(\"\"\" Correct Answer: 1\n",
    "             Explanation: __slots__ restricts the attributes that instances can have, \n",
    "             reducing memory usage by avoiding the creation of a __dict__.\"\"\")\n",
    "        else:\n",
    "            print(\"\"\" Correct Answer: 3\n",
    "            Explanation: The nonlocal keyword modifies the x in the outer function,\n",
    "            so x becomes 11 after inner() increments it by 1.\"\"\")    \n",
    "            \n",
    "    \n",
    "    \n",
    "print(\"Welcome to the Advanced Python Quiz!\")\n",
    "\n",
    "playing = input(\"Do you want to play? (yes/no) \")\n",
    "if playing.lower() != \"yes\":\n",
    "    quit()\n",
    "\n",
    "print(\"Okay, let's play!\")\n",
    "score = 0\n",
    "\n",
    "# Question 1\n",
    "answer = input(\"\"\"What is the primary difference between a deep copy and a shallow copy in Python?\n",
    "1. A deep copy creates a new object, but references the same objects within.\n",
    "2. A shallow copy creates a new object and recursively copies all objects within.\n",
    "3. A deep copy creates a new object and recursively copies all objects within.\n",
    "4. A shallow copy creates a new object, but references the same objects within.\n",
    "Your answer: \"\"\")\n",
    "if answer == \"3\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 2\n",
    "answer = input(\"\"\"What will be the output of the following code?\n",
    "def func(a, b=[]):\n",
    "    b.append(a)\n",
    "    return b\n",
    "\n",
    "print(func(1))\n",
    "print(func(2))\n",
    "1. [1] [2]\n",
    "2. [1] [1, 2]\n",
    "3. [1, 2] [1, 2, 2]\n",
    "4. [1, 1] [2, 2]\n",
    "Your answer: \"\"\")\n",
    "if answer == \"2\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 3\n",
    "answer = input(\"\"\"What is the time complexity of searching for an element in a sorted list using binary search?\n",
    "1. O(1)\n",
    "2. O(n)\n",
    "3. O(log n)\n",
    "4. O(n log n)\n",
    "Your answer: \"\"\")\n",
    "if answer == \"3\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 4\n",
    "answer = input(\"\"\"Which of the following Python features allows creating iterators from sequences, such as lists or strings, efficiently?\n",
    "1. List comprehension\n",
    "2. Generators\n",
    "3. Lambda functions\n",
    "4. Decorators\n",
    "Your answer: \"\"\")\n",
    "if answer == \"2\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 5\n",
    "answer = input(\"\"\"What will be the output of the following code?\n",
    "x = [1, 2, 3, 4]\n",
    "y = x\n",
    "y[2] = 99\n",
    "print(x)\n",
    "1. [1, 2, 3, 4]\n",
    "2. [1, 2, 99, 4]\n",
    "3. [1, 2, 3, 99]\n",
    "4. [99, 2, 3, 4]\n",
    "Your answer: \"\"\")\n",
    "if answer == \"2\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 6\n",
    "answer = input(\"\"\"Which of the following functions can be used to check if a function is a generator function?\n",
    "1. inspect.isgenerator()\n",
    "2. inspect.isgeneratorfunction()\n",
    "3. isinstance(func, generator)\n",
    "4. hasattr(func, 'generator')\n",
    "Your answer: \"\"\")\n",
    "if answer == \"2\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 7\n",
    "answer = input(\"\"\"What will be the output of the following code?\n",
    "def test():\n",
    "    try:\n",
    "        return 'A'\n",
    "    finally:\n",
    "        return 'B'\n",
    "\n",
    "print(test())\n",
    "1. A\n",
    "2. B\n",
    "3. None\n",
    "4. Error\n",
    "Your answer: \"\"\")\n",
    "if answer == \"2\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 8\n",
    "answer = input(\"\"\"Which of the following decorators is used to define a static method in a Python class?\n",
    "1. @classmethod\n",
    "2. @staticmethod\n",
    "3. @property\n",
    "4. @staticmethodmethod\n",
    "Your answer: \"\"\")\n",
    "if answer == \"2\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 9\n",
    "answer = input(\"\"\"In Python, what does the __slots__ declaration in a class do?\n",
    "1. It defines a fixed set of attributes for instances to save memory.\n",
    "2. It restricts the types of values that can be assigned to attributes.\n",
    "3. It makes the class immutable.\n",
    "4. It optimizes the class for multiprocessing.\n",
    "Your answer: \"\"\")\n",
    "if answer == \"1\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "# Question 10\n",
    "answer = input(\"\"\"What will be the output of the following code?\n",
    "x = 5\n",
    "def outer():\n",
    "    x = 10\n",
    "    def inner():\n",
    "        nonlocal x\n",
    "        x += 1\n",
    "        return x\n",
    "    return inner()\n",
    "\n",
    "print(outer())\n",
    "1. 6\n",
    "2. 10\n",
    "3. 11\n",
    "4. 16\n",
    "Your answer: \"\"\")\n",
    "if answer == \"3\":\n",
    "    print(\"Correct!\")\n",
    "    score += 1\n",
    "else:\n",
    "    print(\"Incorrect!\")\n",
    "\n",
    "print(f\"You got {score} out of 10 correct!\")\n",
    "explanation=input(\"want explanation (yes/no)\")\n",
    "if explanation.lower()==yes:\n",
    "    k=[]\n",
    "    t=int(input(\"how many questions you want explanation \"))\n",
    "    print(\"Give question numbers to get explanation\")\n",
    "    for i in range(t):\n",
    "        k.append(int(input()))\n",
    "        if k[i]>10:\n",
    "            print(\"question was not present in the quiz\")\n",
    "            \n",
    "    explain(k)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da589cc4",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8424cd4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
